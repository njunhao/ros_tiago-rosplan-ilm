(define (domain tiago)
(:requirements :strips :typing :probabilistic-effects  )
(:types waypoint robot obj person)
(:predicates
  (robot_at ?v - robot ?wp - waypoint)
  (holding ?v - robot ?o - obj)
  (emptyhand ?v - robot)
  (localised ?v - robot)
  ; (explored ?v - robot)
  (object_at ?o - obj ?wp - waypoint)
  (object_with ?o - obj ?p - person)
  (person_at ?p - person ?wp - waypoint)
  ; (person_satisfied ?p - person)
  (person_found ?p - person)
  (person_not_found ?p - person)
  (task_received ?p - person)
  ; (task_completed ?p - person)
)

(:action goto_waypoint
  :parameters (?v - robot ?from ?to - waypoint)
  :precondition (and (robot_at ?v ?from) (localised ?v))
  :effect (and (probabilistic 0.8 (and (robot_at ?v ?to) (not (robot_at ?v ?from)))
              0.2 (not (localised ?v))
    ))
)

(:action localise
  :parameters (?v - robot)
  :precondition (and )
  :effect (and (probabilistic 0.9 (localised ?v)
              0.1 (not (localised ?v))))
)

; find person
(:action find_person
  :parameters (?v - robot ?p - person)
  :precondition (and (localised ?v) (person_not_found ?p))
  :effect (and (probabilistic 0.8 (and (person_found ?p) (not (person_not_found ?p)))
              0.2 (not (localised ?v))))
)

; (:action report_back
;   :parameters (?v - robot ?p - person ?loc - waypoint)
;   :precondition (and (robot_at ?v ?loc) (person_at ?p ?loc) (task_completed ?p))
;   :effect (and (person_satisfied ?p))
; )

(:action ask_person
  :parameters (?v - robot ?p - person ?loc - waypoint)
  :precondition (and (robot_at ?v ?loc) (person_at ?p ?loc))
  :effect (and (task_received ?p))
)


(:action pick_up
  :parameters (?v - robot ?o - obj ?loc - waypoint)
  :precondition (and (robot_at ?v ?loc) (object_at ?o ?loc) (emptyhand ?v))
    :effect (and (holding ?v ?o) (not (emptyhand ?v)) (not (object_at ?o ?loc)))
)

(:action put_down
  :parameters (?v - robot ?o - obj ?loc - waypoint)
  :precondition (and (robot_at ?v ?loc) (holding ?v ?o))
    :effect (and (not (holding ?v ?o)) (emptyhand ?v) (object_at ?o ?loc))
)


(:action take
  :parameters (?v - robot ?o - obj ?p - person ?loc - waypoint)
  :precondition (and (robot_at ?v ?loc) (person_at ?p ?loc) (emptyhand ?v) (object_with ?o ?p))
    :effect (and (holding ?v ?o) (not (emptyhand ?v)) (not (object_with ?o ?p)))
)


(:action give
  :parameters (?v - robot ?o - obj ?p - person ?loc - waypoint)
  :precondition (and (robot_at ?v ?loc) (person_at ?p ?loc) (holding ?v ?o))
    :effect (and (not (holding ?v ?o)) (emptyhand ?v) (object_with ?o ?p))
)

; (:action explore
;   :parameters (?v - robot)
;   :precondition (and (localised ?v))
;   :effect (and (explored ?v))
; )

)


